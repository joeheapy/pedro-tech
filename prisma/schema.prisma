generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id                      String    @id @default(uuid())
  userId                  String    @unique
  email                   String
  subscriptionTier        String?
  subscriptionActive      Boolean   @default(false)
  subscriptionEndDate     DateTime?
  stripeSubscriptionId    String?   @unique
  cancellationRequested   Boolean   @default(false)
  cancellationRequestedAt DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  projects                Project[] // Relation field to link with projects
}

model Project {
  id          String   @id @default(uuid())
  title       String
  description String?  @map("projectDescription") // Map to existing column name
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign key relation to Profile
  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  // Relations to each section in the project
  journeySteps    JourneySteps[]
  personas        persona[]
  customerPains   customerpains[]
  businessPains   businesspains[]
  serviceFeatures servicefeatures[]
  serviceEnablers serviceenablers[]

  // Index for query optimization
  @@index([profileId])
}

model JourneySteps {
  id                  String   @id @default(uuid())
  businessProposition String
  customerScenario    String
  targetCustomers     String
  personaName         String
  journeyData         Json // To store the journey steps array
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Add this relationship field:
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model persona {
  id        String   @id @default(uuid())
  personas  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationship with Project
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model customerpains {
  id         String   @id @default(uuid())
  painPoints Json // Stores CustomerPainPointData as JSON
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationship with Project
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model businesspains {
  id         String   @id @default(uuid())
  painPoints Json // Stores BusinessPainPointData as JSON
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationship with Project
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model servicefeatures {
  id        String   @id @default(uuid())
  features  Json // Stores array of features
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationship with Project
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model serviceenablers {
  id        String   @id @default(uuid())
  enablers  Json // Stores array of enablers
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationship with Project
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
